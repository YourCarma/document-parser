from pydantic import BaseModel,Field
from enum import Enum
from fastapi import File,UploadFile,Form
from dataclasses import dataclass, field
from typing import Dict,List
from uuid import UUID,uuid4
from datetime import datetime
from typing import Optional,Dict,Any

class ExtractRequest(BaseModel):
    translated:bool = Field(...,title="–§–ª–∞–∂–æ–∫ –¥–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥–∞")
    target_lang: str = Field(..., title="–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", description="üåç –Ø–∑—ã–∫ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞", example="en")
    src_lang:str = Field(..., title="–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", description="üåç –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", example="ru")
    target_conv_format:str = Field(..., title="–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", description="üéØ –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç", example="md")
    extracted_elements:list[str] = Field(default=["tables", "pictures"], description="–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",example=["tables", "pictures"])
    max_num_page: int = Field(...,title="–ö–æ–ª-–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è")

class UploadDocumentsRequest(BaseModel):
    src_lang: str = Form(..., title="–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", description="üåç –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", example="ru")
    target_conv_format: str = Form(..., title="–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", description="üéØ –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç", example="md")
    extracted_elements: List[str] = Form(default=["tables", "pictures"], description="–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",example=["tables", "pictures"])

class ConvertTextRequest(BaseModel):
    text: str = Field(...,description="–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç",example="text")
    voice_name: str = Field(...,description="–í—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å",example="Alice")

class Progress(BaseModel):
    progress: float = 0.0 # –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 0.0 –¥–æ 1.0
    status: str = "Pending"
        
class Task(BaseModel):
    task_id: UUID
    user_id: UUID
    # created_at: datetime
    # updated_at: datetime
    progress: Progress
    # response_data: Optional[Dict[str,Any]] = None 

class TaskStatus(Enum):
   PENGING="Pending"
   AWAITING="Awaiting"
   PROCESSING="Processing"
   READY="Ready"
   ERROR="Error"