from fastapi import APIRouter,UploadFile,File,Form
from typing import List
from settings import settings
from openai import OpenAI 
from fastapi.responses import FileResponse
from uuid import uuid4
from .schemas import (
    ConvertTextRequest,
    ExtractRequest,
    Task,
    TaskStatus,
    Progress
)
import base64
from fastapi.websockets import WebSocket,WebSocketDisconnect
from .service import (
    Extractor,
    Uploader,
    TaskManager,
)
from .exceptions import BadRequestError
import asyncio,mimetypes
from datetime import datetime
from pathlib import Path

router = APIRouter(prefix="/parser")

uploader = Uploader()
openAiClient = OpenAI(
    base_url=settings.OPENAI_URL,
    api_key=settings.OPENAI_KEY,
)
extractor = Extractor()
taskManager = TaskManager()

USER_ID = uuid4()

@router.post(
    path="/upload",
    summary="–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    description="""
# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
### –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä:
 - **–ò—Å—Ö–æ–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ `/scratch/[filename_currentdate]/src`**
 - **–ì–æ—Ç–æ–≤–∏—Ç –¥–µ—Ä–µ–≤–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞(—Ç–∞–±–ª–∏—Ü,–∫–∞—Ä—Ç–∏–Ω–æ–∫), –ø–µ—Ä–µ–≤–æ–¥–∞(–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ), –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ**
### –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: 
 - **files** `files[]` - –¥–æ–∫—É–º–µ–Ω—Ç—ã
 - **src_lang** `str` - –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 - **target_conv_format** `str` - –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 - **extracted_elements** `str` - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ (–∫–∞—Ä—Ç–∏–Ω–∫–∏,—Ç–∞–±–ª–∏—Ü—ã) - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
### –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
 - **paths** `list[str]` - —Å–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º 
""",
    tags=['Uploader'],
    )
async def upload(
    files: List[UploadFile] = File(..., title="–ò—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã", description="üìÑ –§–∞–π–ª—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"),
    src_lang: str = Form(..., title="–ò—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫", description="üåç –Ø–∑—ã–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", example="ru"),
    target_conv_format: str = Form(..., title="–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏", description="üéØ –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç", example="md"),
    extracted_elements: List[str] = Form(default=["tables", "pictures"], description="–≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è",example=["tables", "pictures"]),   
)->list:
  
    paths = []  
    for file in files:
        if file is None:
            raise BadRequestError(detail="–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
        uploader.validate(
            file.content_type,
            src_lang,
            target_conv_format,
        )
    
        scratch_src_file_path = await uploader.save_src_file_and_prepare_scratch_dir(
            file=file,
            elements=extracted_elements,
        )
        
        paths.append(scratch_src_file_path)
    
    return paths

@router.websocket(
    path="/extract",
    name="–ü–∞—Ä—Å–∏–Ω–≥",
)
async def extract(ws: WebSocket):
    await ws.accept()
    
    body_response = {}
    
    while True:
        try:
            await ws.send_json({"type":"connection","body":"connection-ok"})
            
            extract_data = await ws.receive_json()
                
            extract_request = ExtractRequest(
                    src_lang=extract_data['src_lang'],
                    target_conv_format=extract_data['target_conv_format'],
                    extracted_elements=extract_data['extracted_elements'],
                    translated=bool(extract_data['translated'] if str(extract_data['translated']).lower() in ['true','false'] else False), 
                    target_lang=extract_data['target_lang'],   
                    max_num_page=extract_data['max_num_page'],
                )
                
            paths = extract_data['paths']
                
            prefer_description = bool(extract_data['prefer_description'] if str(extract_data['prefer_description']).lower() in ['true','false'] else False)
                
            for file_path in paths:
                    # #---------------–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –≤–µ–±-—Ö—É–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º-------------------
                    
                    task_id = uuid4()
                    key = f"{USER_ID}:{settings.SERVICE_NAME}:{task_id}"
                    task = Task(
                        task_id=task_id,
                        user_id=USER_ID,
                        progress=Progress(
                            progress=0.0,
                            status="PENDING"
                        )
                    )
                    
                    storage_response = await taskManager.storage(
                        key=key,
                        task=task,
                    )
                    
                    await ws.send_json(
                        {
                            "type":"info",
                            "body":{
                                "filename":f"{task_id}",
                                "status":f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞–¥–∞—á—É: {storage_response['code']} : {storage_response['message']}"
                            }
                        }
                    )
                    await asyncio.sleep(0.5)
                    
                    #----------------------------------------------------------------------
                    mime_type,_ = mimetypes.guess_type(file_path)
                    
                    if (
                        mime_type in ['image/png','image/webp','image/jpeg'] and prefer_description 
                    ):
                        await ws.send_json(
                            {
                                "type":"info",
                                "body":{
                                    "filename":f"{file_path.split("/")[-1]}",
                                    "status":"–ü—Ä–µ–æ–±—Ä–∞–∑—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É...",
                                },
                            })
                        await asyncio.sleep(0.5)
                        
                        await uploader.resize_image(file_path)
                        
                        await ws.send_json(
                            {
                                "type":"info",
                                "body":{
                                    "filename":f"{file_path.split("/")[-1]}",
                                    "status":"–ò–∑—É—á–∞—é –∫–∞—Ä—Ç–∏–Ω–∫—É...",
                                },
                            })
                        await asyncio.sleep(0.5)
                        
                        with open(file_path,'rb') as img:
                            content = img.read()
                            
                        image_url = f"data:image/jpeg;base64,{base64.b64encode(content).decode('utf-8')}"
                        
                        await ws.send_json(
                            {
                                "type":"info",
                                "body":{
                                    "filename":f"{file_path.split("/")[-1]}",
                                    "status":"–§–æ—Ä–º–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å –∫ LLM..."
                                }
                            }
                        )
                        await asyncio.sleep(0.5)
                        
                        openai_response = openAiClient.chat.completions.create(
                            model="LocalModel",
                            messages = [
                                {
                                    "role": "user",
                                    "content": [
                                        {"type": "text", "text": "–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ? –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º"},
                                        {
                                            "type": "image_url",
                                            "image_url": {
                                                "url": image_url
                                            }
                                        },
                                    ]      
                                },
                            ]
                        ).choices[0].message.content
                        
                        
                        update_progress_response = await taskManager.update_progress(
                            key=key,
                            progress=Progress(
                                progress=0.5,
                                status="PROCESSING",
                            ),
                        )
                        
                        await ws.send_json(
                            {
                                "type":"info",
                                "body":{
                                    "filename":f"{task_id}",
                                    "status":f"–û–±–Ω–æ–≤–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ –Ω–∞ 0.5: {update_progress_response}"
                                }
                            }
                        )
                        await asyncio.sleep(0.5)
                            
                            
                        await ws.send_json(
                                {
                                    "type":"info",
                                    "body":{
                                        "filename":f"{file_path.split("/")[-1]}",
                                        "status":"–û—Ç–≤–µ—Ç –æ—Ç LLM..."
                                    }
                                }
                            )
                        await asyncio.sleep(0.5)
                            
                        extract_response = {
                                f"{file_path.split("/")[-1]}":{
                                    "text":"",
                                    "summary":openai_response,
                                    "images":"",
                                    "pictures":"",
                                }
                            }
                            
                        body_response.update(extract_response)
                            
                        update_progress_response = await taskManager.update_progress(
                                key=f"{USER_ID}:{settings.SERVICE_NAME}:{task_id}",
                                progress=Progress(
                                    progress=1.0,
                                    status="READY",
                                )
                            )
                            
                        await ws.send_json(
                                {
                                    "type":"info",
                                    "body":{
                                        "filename":f"{task_id}",
                                        "status":f"–ó–∞–≤–µ—Ä—à–∏–ª –∑–∞–¥–∞—á—É: {update_progress_response}"
                                    }
                                }
                            )
                        await asyncio.sleep(0.5)
                            
                        await ws.send_json(
                                {
                                    "type":"info",
                                    "body":{
                                        "filename":"",
                                        "status":"–ü–µ—Ä–µ—Ö–æ–∂—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ñ–∞–π–ª—É..."
                                    }
                                }
                            )
                        await asyncio.sleep(0.5)
                            
                    else:                                    
                        with open(file_path,"rb") as f:
                            src_file = UploadFile(
                                file=f.read(),
                                filename=file_path.split('/')[-1]
                            )

                        scratch_dir_path = str(Path(file_path).parent.parent)
                        
                        extract_response = await extractor.extract(
                            ws=ws,
                            scratch_dir_path=scratch_dir_path,
                            src_file=src_file,
                            extract_request=extract_request
                        )
                    
                        update_progress_response = await taskManager.update_progress(
                            key=f"{USER_ID}:{settings.SERVICE_NAME}:{task_id}",
                            progress=Progress(
                                progress=0.5,
                                status="PROGRESS",
                            )
                        )
                            
                        await ws.send_json(
                                {
                                "type":"info",
                                "body":{
                                    "filename":f"{task_id}",
                                    "status":f"–û–±–Ω–æ–≤–∏–ª –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞—á–∏ –Ω–∞ 0.5: {update_progress_response}"
                                }
                            }
                        )
                        await asyncio.sleep(0.5)

                        body_response.update(extract_response)

                        update_progress_response = await taskManager.update_progress(
                            key=f"{USER_ID}:{settings.SERVICE_NAME}:{task_id}",
                            progress=Progress(
                                progress=1.0,
                                status="READY",
                            )
                        )
                        await ws.send_json(
                            {
                                "type":"info",
                                "body":{
                                    "filename":f"{task_id}",
                                    "status":f"–ó–∞–≤–µ—Ä—à–∏–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {update_progress_response}"
                                }
                            }
                        )
                        await asyncio.sleep(0.5)
                        
            await ws.send_json({
                "type":"all-files-ended",
                "body":body_response,
            })
            break
                
        except WebSocketDisconnect as e:
            await ws.send_json({"error":e})
            break
        except Exception as e:
            await ws.send_json({"error":e})
            await ws.close()
            break

@router.post(
    path="/voice",
    summary="–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ—Ñ–∞–π–ª",
    description="""
# –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ
## –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É Sova-TTS –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ –≤ –≥–æ–ª–æ—Å. –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è `/mnt/king/sova.git/services/text_to_speech/audios/{audio_filename}` 
### –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
 - **text** `str` - –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
 - **voice_name** `str` - –≥–æ–ª–æ—Å –¥–ª—è –æ–∑–≤—É—á–∫–∏ 
### –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
 - **path_to_audiofile** `str` - –ø—É—Ç—å –∫ –∞—É–¥–∏–æ—Ñ–∞–π–ª—É
""",
    tags=['TTS']
    )
async def to_voice(request: ConvertTextRequest) -> FileResponse:
    text = request.text
    voice_name = request.voice_name
    
    full_path_to_audio = extractor.text_to_speech(
        message=text,
        voice_name=voice_name,
    )

    path_to_audio = str(str(full_path_to_audio).split("text_to_speech")[-1].lstrip("/"))

    return path_to_audio